// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.Logging;

namespace Microsoft.EntityFrameworkCore.Internal
{
    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static class SqlServerDesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Properties.SqlServerDesignStrings", typeof(SqlServerDesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     For column {columnId}. This column is set up as an Identity column, but the SQL Server data type is {sqlServerDataType}. This will be mapped to CLR type byte which does not allow the SqlServerValueGenerationStrategy.IdentityColumn setting. Generating a matching Property but ignoring the Identity setting.
        /// </summary>
        public static readonly EventDefinition<string, string> LogDataTypeDoesNotAllowSqlServerIdentityStrategy
            = new EventDefinition<string, string>(
                SqlServerDesignEventId.DataTypeDoesNotAllowSqlServerIdentityStrategyWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    SqlServerDesignEventId.DataTypeDoesNotAllowSqlServerIdentityStrategyWarning,
                    _resourceManager.GetString("LogDataTypeDoesNotAllowSqlServerIdentityStrategy")));

        /// <summary>
        ///     Found default schema {defaultSchema}.
        /// </summary>
        public static readonly EventDefinition<string> LogFoundDefaultSchema
            = new EventDefinition<string>(
                SqlServerDesignEventId.DefaultSchemaFound,
                LogLevel.Debug,
                LoggerMessage.Define<string>(
                    LogLevel.Debug,
                    SqlServerDesignEventId.DefaultSchemaFound,
                    _resourceManager.GetString("LogFoundDefaultSchema")));

        /// <summary>
        ///     Found type alias with name: {alias} which maps to underlying data type {dataType}.
        /// </summary>
        public static readonly EventDefinition<string, string> LogFoundTypeAlias
            = new EventDefinition<string, string>(
                SqlServerDesignEventId.TypeAliasFound,
                LogLevel.Debug,
                LoggerMessage.Define<string, string>(
                    LogLevel.Debug,
                    SqlServerDesignEventId.TypeAliasFound,
                    _resourceManager.GetString("LogFoundTypeAlias")));

        /// <summary>
        ///     Found column with table: {tableName}, column name: {columnName}, data type: {dataType}, ordinal: {ordinal}, nullable: {isNullable}, primary key ordinal: {primaryKeyOrdinal}, default value: {defaultValue}, computed value: {computedValue}, precision: {precision}, scale: {scale}, maximum length: {maxLength}, identity: {isIdentity}, computed: {isComputed}.
        /// </summary>
        public static readonly RawEventDefinition LogFoundColumn
            = new RawEventDefinition(
                SqlServerDesignEventId.ColumnFound,
                LogLevel.Debug,
                _resourceManager.GetString("LogFoundColumn"));

        /// <summary>
        ///     Found foreign key column with table: {tableName}, foreign key name: {fkName}, principal table: {principalTableName}, column name: {columnName}, principal column name: {principalColumnName}, update action: {updateAction}, delete action: {deleteAction}, ordinal: {ordinal}.
        /// </summary>
        public static readonly RawEventDefinition LogFoundForeignKeyColumn
            = new RawEventDefinition(
                SqlServerDesignEventId.ForeignKeyColumnFound,
                LogLevel.Debug,
                _resourceManager.GetString("LogFoundForeignKeyColumn"));

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
